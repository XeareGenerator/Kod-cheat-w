 months ago
gradlew
Added CommandManager
17 months ago
gradlew.bat
Added workspace
2 years ago
settings.gradle
updated theme
version: 2
updates:
- package-ecosystem: gradle
  directory: "/"
  schedule:
    interval: daily
  open-pull-requests-limit: 10
blank_issues_enabled: false
contact_links:
  - name: 🗨 Discussions
    url: https://forums.ccbluex.net/
    about: Ask and answer questions.
name: ✨ Feature request
description: Suggest an idea for this project
title: "[FEATURE]"

body:
- type: markdown
  attributes:
    value: |
      🧐 **Guidelines:**
      - Search through [existing issues](https://github.com/CCBlueX/LiquidBounce/issues?q=is%3Aopen+is%3Aissue) first to ensure that this feature has not been requested before.
      - Write a descriptive title for your issue. Avoid generic or vague titles such as "Some suggestions" or "Ideas for improvement".
      - Keep your issue focused on one single problem. If you have multiple feature requests, please create separate issues for each of them.
      - Provide as much context as possible in the details section. Include screenshots, screen recordings, links, references, or anything else you may consider relevant.
      - If you want to ask a question instead of requesting a feature, please use the [forum](https://forums.ccbluex.net/) instead.
- type: textarea
  attributes:
    label: Describe your feature request.
    description: A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
  validations:
    required: true

- type: textarea
  attributes:
    label: Additional context
    description: Add any other context or screenshots about the feature request here.
  validations:
    required: false
 ************************************************************************************** CLIENTED : INTO MOD
name: 🐞 Bug report
description: Create a report to help us improve
title: "[BUG]"

body:
- type: markdown
  attributes:
    value: |
      🧐 **Guidelines:**
      - Search through [existing issues](https://github.com/CCBlueX/LiquidBounce/issues?q=is%3Aopen+is%3Aissue) first to ensure that this bug has not been reported before.
      - Write a descriptive title for your issue. Avoid generic or vague titles such as "Something's not working" or "A couple of problems".
      - Keep your issue focused on one single problem. If you have multiple bug reports, please create separate issues for each of them.
      - Provide as much context as possible in the details section. Include screenshots, screen recordings, links, references, or anything else you may consider relevant.
- type: input
  attributes:
    label: LiquidBounce Build/Version
    description: Which version of LiquidBounce does this bug affect?
    placeholder: e.g. b61
  validations:
    required: true
    
- type: dropdown
  attributes:
    label: Operating System
    description: On which OS is LiquidBounce running?
    multiple: true
    options:
    - macOS
    - Linux
    - Windows 7
    - Windows 8
    - Windows 8.1
    - Windows 10
    - Windows 11
  validations:
    required: true

- type: input
  attributes:
    label: Minecraft Version
    description: Which Minecraft-Version does this bug affect?
    placeholder: e.g. 1.16.5
  validations:
    required: true

- type: textarea
  attributes:
    label: Describe the bug
    description: Clear and thorough explanation of the bug.
    placeholder: I was doing X expecting Y to happen, but Z happened instead.
  validations:
    required: true

- type: textarea
  attributes:
    label: Steps to reproduce
    description: Minimum steps required to reproduce the bug.
    placeholder: |
      - Go to '...'
      - Click on '....'
      - Scroll down to '....'
      - See error
  validations:
    required: true
    
- type: textarea
  attributes:
    label: Client Log
    description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.
    render: shell
  validations:
    required: true

- type: textarea
  attributes:
    label: Screenshots
    description: If applicable, add screenshots to help explain your problem.
  validations:
    required: false
  attributes:
    label: Client Log
    description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.
    render: shell
  validations:
    required: true
TITLE NEW V2 * 
name: 🐞 Bug report
description: Create a report to help us improve
title: "[BUG]"

body:0 setingt
********************************************************************************************** STRENGTH
name: Build

on:
  push:
    branches: [ nextgen ]
  pull_request:
    branches: [ nextgen ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Grant all permissions for theme
        run: sudo chmod -R 777 theme
      - uses: burrunan/gradle-cache-action@v1
        name: Build
        with:
          job-id: jdk17
          arguments: genSources build
          gradle-version: wrapper
      - name: Upload artifact
        run: |
          function gradleprop {
              grep "${1}" gradle.properties|cut -d'=' -f2
          }
          export LB_VERSION=$(gradleprop 'mod_version')
          export MINECRAFT_VERSION=$(gradleprop 'minecraft_version')
          export LOADER_VERSION=$(gradleprop 'loader_version')
          export FABRICAPI_VERSION=$(gradleprop 'fabric_version')
          export KOTLIN_VERSION=$(gradleprop 'kotlin_version')
          export FABRIC_KOTLIN_VERSION=$(gradleprop 'fabric_kotlin_version')
          echo Version: $LB_VERSION, Minecraft: $MINECRAFT_VERSION
          cd build/libs
          export JAR=$(find . -regex '.*liquidbounce-[0-9|.]*\.jar')
          cp $JAR zip/liquidbounce.jar
          cd zip
          zip -r liquidbounce.zip *
          md5sum liquidbounce.zip
          curl --connect-timeout 30 -m 300 -X POST -F "artifact=@liquidbounce.zip" -H "Authorization: ${{ secrets.NIGHTLY_PASS }}" -F "gh_id=${{ github.event.head_commit.id }}" -F "gh_ref=${{ github.ref }}" -F "gh_message=${{ github.event.head_commit.message }}" -F "gh_timestamp=${{ github.event.head_commit.timestamp }}" -F "lb_version=$LB_VERSION" -F "mc_version=$MINECRAFT_VERSION" -F "fabric_loader_version=$LOADER_VERSION" -F "fabric_api_version=$FABRICAPI_VERSION" -F "kotlin_version=$KOTLIN_VERSION" -F "fabric_kotlin_version=$FABRIC_KOTLIN_VERSION" https://api.liquidbounce.net/api/v1/version/new
        name: Build
        with:
          job-id: jdk17
          arguments: genSources build
          gradle-version: wrapper
      - name: Upload artifact
        run: |
          function gradleprop {
              grep "${1}" gradle.properties|cut -d'=' -f2
          }
          export LB_VERSION=$(gradleprop 'mod_version')
          export MINECRAFT_VERSION=$(gradleprop 'minecraft_version')
          export LOADER_VERSION=$(gradleprop 'loader_version')
          export FABRICAPI_VERSION=$(gradleprop 'fabric_version')
          export KOTLIN_VERSION=$(gradleprop 'kotlin_version')
          export FABRIC_KOTLIN_VERSION=$(gradleprop 'fabric_kotlin_version')
          echo Version: $LB_VERSION, Minecraft: $MINECRAFT_VERSION
          cd build/libs
          export JAR=$(find . -regex '.*liquidbounce-[0-9|.]*\.jar')
          cp $JAR zip/liquidbounce.jar
          cd zip
          zip -r liquidbounce.zip *
          md5sum liquidbounce.zip
 ▄▄▄     ▄▄▄ ▄▄▄▄▄▄▄ ▄▄   ▄▄ ▄▄▄ ▄▄▄▄▄▄  ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄   ▄▄ ▄▄    ▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ 
█   █   █   █       █  █ █  █   █      ██  ▄    █       █  █ █  █  █  █ █       █       █
█   █   █   █   ▄   █  █ █  █   █  ▄    █ █▄█   █   ▄   █  █ █  █   █▄█ █       █    ▄▄▄█
█   █   █   █  █ █  █  █▄█  █   █ █ █   █       █  █ █  █  █▄█  █       █     ▄▄█   █▄▄▄ 
█   █▄▄▄█   █  █▄█  █       █   █ █▄█   █  ▄   ██  █▄█  █       █  ▄    █    █  █    ▄▄▄█
█       █   █      ██       █   █       █ █▄█   █       █       █ █ █   █    █▄▄█   █▄▄▄ 
█▄▄▄▄▄▄▄█▄▄▄█▄▄▄▄██▄█▄▄▄▄▄▄▄█▄▄▄█▄▄▄▄▄▄██▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄█  █▄▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█
a open-source minecraft hacked-client for 1.8-1.18.X.
https://liquidbounce.net/

➔ How to install on Fabric
1. Install Fabric Mod Loader for 1.18.2 (How to: https://fabricmc.net/use/).
2. Create a folder called "mods" inside in the ".minecraft" directory.
3. Copy "liquidbounce.jar" into the mods folder.
4. REQUIRED: Install Fabric Language Kotlin mod (https://www.curseforge.com/minecraft/mc-mods/fabric-language-kotlin)
5. RECOMMENDED: Install Fabric API mod (https://www.curseforge.com/minecraft/mc-mods/fabric-api).
6. RECOMMENDED: Install MultiConnect mod to join on 1.8-1.18.X (https://www.curseforge.com/minecraft/mc-mods/multiconnect)
7. Launch Fabric through the Minecraft launcher.

➔ Reminder for nightly builds
This is a development build. Use these versions only if you know what you are doing! Bugs can and will occur!

➔ How to report issues
If you found a issue with this version, please report it on our GitHub Issues:
https://github.com/CCBlueX/LiquidBounce/issues

Make sure it includes all required informations, so we can reproduce it on our own and solve the issue.
In case of an error, please always provide a full log and crash log. (.minecraft/logs/latest.log)

➔ Support
If you need support, join our Guilded below. Feel free to tell us your question in the support channel, no need to ask for asking. There will always be people helping out.

Please don't contact us in direct messages, when you're looking for support.

➔ Do you want to contribute or want to know how our client is written?
Feel free to check the source code on GitHub:
https://github.com/CCBlueX/LiquidBounce

➔ Links
Our website: https://ccbluex.net/
Our youtube: https://youtube.com/ccbluex
Our twitter: https://twitter.com/ccbluex
Our guilded: https://www.guilded.gg/CCBlueX

➔ License
This project is subject to the GNU General Public License v3.0. This does only apply for source code located directly in this clean repository. During the development and compilation process, additional source code may be used to which we have obtained no rights. Such code is not covered by the GPL license.

Copyright © 2022 | CCBlueX | All rights reserved.
 ▄▄▄     ▄▄▄ ▄▄▄▄▄▄▄ ▄▄   ▄▄ ▄▄▄ ▄▄▄▄▄▄  ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄   ▄▄ ▄▄    ▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ 
█   █   █   █       █  █ █  █   █      ██  ▄    █       █  █ █  █  █  █ █       █       █
█   █   █   █   ▄   █  █ █  █   █  ▄    █ █▄█   █   ▄   █  █ █  █   █▄█ █       █    ▄▄▄█
█   █   █   █  █ █  █  █▄█  █   █ █ █   █       █  █ █  █  █▄█  █       █     ▄▄█   █▄▄▄ 
█   █▄▄▄█   █  █▄█  █       █   █ █▄█   █  ▄   ██  █▄█  █       █  ▄    █    █  █    ▄▄▄█
█       █   █      ██       █   █       █ █▄█   █       █       █ █ █   █    █▄▄█   █▄▄▄ 
█▄▄▄▄▄▄▄█▄▄▄█▄▄▄▄██▄█▄▄▄▄▄▄▄█▄▄▄█▄▄▄▄▄▄██▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄█  █▄▄█▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█
.clickgui-container.svelte-1fiwon3{background-color:rgba(0, 0, 0, .4);height:100vh;width:100vw;-webkit-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.panel.svelte-tllkak{border-radius:5px;overflow:hidden;width:225px;position:absolute}.title-wrapper.svelte-tllkak{display:grid;grid-template-columns:max-content auto max-content;align-items:center;column-gap:12px;background-color:rgba(0, 0, 0, 0.68);border-bottom:solid 2px #4677ff;padding:10px 15px}.title.svelte-tllkak{font-size:14px;font-weight:600;color:white}.modules.svelte-tllkak{background-color:rgba(0, 0, 0, 0.5);max-height:545px;overflow:auto}.visibility-toggle.svelte-tllkak{height:12px;width:12px;position:relative}.visibility-toggle.svelte-tllkak::before{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:0;left:50%;width:2px;height:100%;margin-left:-1px}.visibility-toggle.svelte-tllkak::after{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:50%;left:0;width:100%;height:2px;margin-top:-1px}.visibility-toggle.expanded.svelte-tllkak::before{transform:rotate(90deg)}.visibility-toggle.expanded.svelte-tllkak::after{transform:rotate(180deg)}.svelte-tllkak::-webkit-scrollbar{width:0}.module.svelte-1mu6tbf{color:#CBD1E3;text-align:center;font-weight:600;font-size:12px;padding:10px;transition:ease background-color 0.2s, ease color 0.2s;position:relative}.module.enabled.svelte-1mu6tbf{color:white}.module.svelte-1mu6tbf:hover{background-color:rgba(0, 0, 0, 0.36)}.module.has-settings.svelte-1mu6tbf::after{content:"";display:block;position:absolute;height:10px;width:10px;right:15px;top:50%;background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat;opacity:0.5;transform-origin:50% 50%;transform:translateY(-50%) rotate(-90deg);transition:ease opacity 0.2s, ease transform 0.4s}.module.has-settings.expanded.svelte-1mu6tbf::after{transform:translateY(-50%) rotate(0);opacity:1}.settings.svelte-1mu6tbf{background-color:rgba(0, 0, 0, 0.36);border-left:solid 4px #4677FF;overflow:hidden}.setting.svelte-1u9hj{display:grid;grid-template-areas:"a b"
            "c c";padding:7px 10px}.name.svelte-1u9hj{grid-area:a;font-weight:500;color:white;font-size:12px}.animation-fix.svelte-1u9hj{height:138px}.value.svelte-1u9hj{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px;cursor:text;text-transform:uppercase;background-color:transparent;border:none;padding:0;margin:0}.color-picker.svelte-1u9hj{grid-area:c}.setting.svelte-10rakz.svelte-10rakz.svelte-10rakz{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-10rakz.svelte-10rakz.svelte-10rakz{font-weight:500;color:white;font-size:12px;margin-left:30px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:relative;display:inline-block;width:22px;height:12px}.switch.svelte-10rakz input.svelte-10rakz.svelte-10rakz{display:none}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz{background-color:#4860a7}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz:before{transform:translateX(10px);background-color:#4677ff}.setting.svelte-fz8b1a{display:grid;grid-template-areas:"a b"
            "c c";grid-template-columns:1fr;padding:7px 10px}.animation-fix.svelte-fz8b1a{min-height:51px}.name.svelte-fz8b1a{grid-area:a;font-weight:500;color:white;font-size:12px}.slider.svelte-fz8b1a{grid-area:c}.value.svelte-fz8b1a{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px}.setting.svelte-nl36k0{padding:7px 10px}.name.svelte-nl36k0{font-weight:500;color:white;font-size:12px}input.svelte-nl36k0{width:100%;background-color:rgba(0, 0, 0, 0.5);border:none;font-family:"Montserrat", sans-serif;padding:5px;border-bottom:solid 2px transparent;border-radius:5px;font-size:12px;margin-top:5px;color:white;transition:ease border-bottom 0.2s;border:solid 2px transparent}input.svelte-nl36k0:focus{border:solid 2px #4677ff}.setting.svelte-7knc6a.svelte-7knc6a{padding:7px 10px;overflow:hidden}.name.svelte-7knc6a.svelte-7knc6a{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-7knc6a.svelte-7knc6a{border-radius:5px 5px 0px 0px}.name.expanded.svelte-7knc6a.svelte-7knc6a::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-7knc6a.svelte-7knc6a::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-7knc6a.svelte-7knc6a{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-7knc6a .value.svelte-7knc6a{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-7knc6a .value.enabled.svelte-7knc6a{color:#4677ff}.settings.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden;margin-top:10px}.setting.svelte-1cmaqns.svelte-1cmaqns{overflow:hidden}.choice.svelte-1cmaqns.svelte-1cmaqns{padding:7px 10px}.name.svelte-1cmaqns.svelte-1cmaqns{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-1cmaqns.svelte-1cmaqns{border-radius:5px 5px 0px 0px}.name.expanded.svelte-1cmaqns.svelte-1cmaqns::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-1cmaqns.svelte-1cmaqns::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-1cmaqns .value.svelte-1cmaqns{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-1cmaqns .value.enabled.svelte-1cmaqns{color:#4677ff}.name.svelte-19v143m{font-weight:500;color:white;font-size:12px;margin-left:10px;margin-bottom:3px}.setting.svelte-19v143m{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;padding:7px 0}.settings.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden}.boolean.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{font-weight:500;color:white;font-size:12px;margin-left:30px}.switch.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:relative;display:inline-block;width:22px;height:12px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-zsk8ei input.svelte-zsk8ei.svelte-zsk8ei{display:none}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei{background-color:#4860a7}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei:before{transform:translateX(10px);background-color:#4677ff}
.clickgui-container.svelte-1fiwon3{background-color:rgba(0, 0, 0, .4);height:100vh;width:100vw;-webkit-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.panel.svelte-tllkak{border-radius:5px;overflow:hidden;width:225px;position:absolute}.title-wrapper.svelte-tllkak{display:grid;grid-template-columns:max-content auto max-content;align-items:center;column-gap:12px;background-color:rgba(0, 0, 0, 0.68);border-bottom:solid 2px #4677ff;padding:10px 15px}.title.svelte-tllkak{font-size:14px;font-weight:600;color:white}.modules.svelte-tllkak{background-color:rgba(0, 0, 0, 0.5);max-height:545px;overflow:auto}.visibility-toggle.svelte-tllkak{height:12px;width:12px;position:relative}.visibility-toggle.svelte-tllkak::before{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:0;left:50%;width:2px;height:100%;margin-left:-1px}.visibility-toggle.svelte-tllkak::after{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:50%;left:0;width:100%;height:2px;margin-top:-1px}.visibility-toggle.expanded.svelte-tllkak::before{transform:rotate(90deg)}.visibility-toggle.expanded.svelte-tllkak::after{transform:rotate(180deg)}.svelte-tllkak::-webkit-scrollbar{width:0}.module.svelte-1mu6tbf{color:#CBD1E3;text-align:center;font-weight:600;font-size:12px;padding:10px;transition:ease background-color 0.2s, ease color 0.2s;position:relative}.module.enabled.svelte-1mu6tbf{color:white}.module.svelte-1mu6tbf:hover{background-color:rgba(0, 0, 0, 0.36)}.module.has-settings.svelte-1mu6tbf::after{content:"";display:block;position:absolute;height:10px;width:10px;right:15px;top:50%;background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat;opacity:0.5;transform-origin:50% 50%;transform:translateY(-50%) rotate(-90deg);transition:ease opacity 0.2s, ease transform 0.4s}.module.has-settings.expanded.svelte-1mu6tbf::after{transform:translateY(-50%) rotate(0);opacity:1}.settings.svelte-1mu6tbf{background-color:rgba(0, 0, 0, 0.36);border-left:solid 4px #4677FF;overflow:hidden}.setting.svelte-1u9hj{display:grid;grid-template-areas:"a b"
            "c c";padding:7px 10px}.name.svelte-1u9hj{grid-area:a;font-weight:500;color:white;font-size:12px}.animation-fix.svelte-1u9hj{height:138px}.value.svelte-1u9hj{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px;cursor:text;text-transform:uppercase;background-color:transparent;border:none;padding:0;margin:0}.color-picker.svelte-1u9hj{grid-area:c}.setting.svelte-10rakz.svelte-10rakz.svelte-10rakz{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-10rakz.svelte-10rakz.svelte-10rakz{font-weight:500;color:white;font-size:12px;margin-left:30px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:relative;display:inline-block;width:22px;height:12px}.switch.svelte-10rakz input.svelte-10rakz.svelte-10rakz{display:none}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz{background-color:#4860a7}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz:before{transform:translateX(10px);background-color:#4677ff}.setting.svelte-fz8b1a{display:grid;grid-template-areas:"a b"
            "c c";grid-template-columns:1fr;padding:7px 10px}.animation-fix.svelte-fz8b1a{min-height:51px}.name.svelte-fz8b1a{grid-area:a;font-weight:500;color:white;font-size:12px}.slider.svelte-fz8b1a{grid-area:c}.value.svelte-fz8b1a{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px}.setting.svelte-nl36k0{padding:7px 10px}.name.svelte-nl36k0{font-weight:500;color:white;font-size:12px}input.svelte-nl36k0{width:100%;background-color:rgba(0, 0, 0, 0.5);border:none;font-family:"Montserrat", sans-serif;padding:5px;border-bottom:solid 2px transparent;border-radius:5px;font-size:12px;margin-top:5px;color:white;transition:ease border-bottom 0.2s;border:solid 2px transparent}input.svelte-nl36k0:focus{border:solid 2px #4677ff}.setting.svelte-7knc6a.svelte-7knc6a{padding:7px 10px;overflow:hidden}.name.svelte-7knc6a.svelte-7knc6a{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-7knc6a.svelte-7knc6a{border-radius:5px 5px 0px 0px}.name.expanded.svelte-7knc6a.svelte-7knc6a::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-7knc6a.svelte-7knc6a::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-7knc6a.svelte-7knc6a{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-7knc6a .value.svelte-7knc6a{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-7knc6a .value.enabled.svelte-7knc6a{color:#4677ff}.settings.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden;margin-top:10px}.setting.svelte-1cmaqns.svelte-1cmaqns{overflow:hidden}.choice.svelte-1cmaqns.svelte-1cmaqns{padding:7px 10px}.name.svelte-1cmaqns.svelte-1cmaqns{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-1cmaqns.svelte-1cmaqns{border-radius:5px 5px 0px 0px}.name.expanded.svelte-1cmaqns.svelte-1cmaqns::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-1cmaqns.svelte-1cmaqns::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-1cmaqns .value.svelte-1cmaqns{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-1cmaqns .value.enabled.svelte-1cmaqns{color:#4677ff}.name.svelte-19v143m{font-weight:500;color:white;font-size:12px;margin-left:10px;margin-bottom:3px}.setting.svelte-19v143m{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;padding:7px 0}.settings.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden}.boolean.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{font-weight:500;color:white;font-size:12px;margin-left:30px}.switch.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:relative;display:inline-block;width:22px;height:12px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-zsk8ei input.svelte-zsk8ei.svelte-zsk8ei{display:none}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei{background-color:#4860a7}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei:before{transform:translateX(10px);background-color:#4677ff}
.clickgui-container.svelte-1fiwon3{background-color:rgba(0, 0, 0, .4);height:100vh;width:100vw;-webkit-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.panel.svelte-tllkak{border-radius:5px;overflow:hidden;width:225px;position:absolute}.title-wrapper.svelte-tllkak{display:grid;grid-template-columns:max-content auto max-content;align-items:center;column-gap:12px;background-color:rgba(0, 0, 0, 0.68);border-bottom:solid 2px #4677ff;padding:10px 15px}.title.svelte-tllkak{font-size:14px;font-weight:600;color:white}.modules.svelte-tllkak{background-color:rgba(0, 0, 0, 0.5);max-height:545px;overflow:auto}.visibility-toggle.svelte-tllkak{height:12px;width:12px;position:relative}.visibility-toggle.svelte-tllkak::before{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:0;left:50%;width:2px;height:100%;margin-left:-1px}.visibility-toggle.svelte-tllkak::after{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:50%;left:0;width:100%;height:2px;margin-top:-1px}.visibility-toggle.expanded.svelte-tllkak::before{transform:rotate(90deg)}.visibility-toggle.expanded.svelte-tllkak::after{transform:rotate(180deg)}.svelte-tllkak::-webkit-scrollbar{width:0}.module.svelte-1mu6tbf{color:#CBD1E3;text-align:center;font-weight:600;font-size:12px;padding:10px;transition:ease background-color 0.2s, ease color 0.2s;position:relative}.module.enabled.svelte-1mu6tbf{color:white}.module.svelte-1mu6tbf:hover{background-color:rgba(0, 0, 0, 0.36)}.module.has-settings.svelte-1mu6tbf::after{content:"";display:block;position:absolute;height:10px;width:10px;right:15px;top:50%;background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat;opacity:0.5;transform-origin:50% 50%;transform:translateY(-50%) rotate(-90deg);transition:ease opacity 0.2s, ease transform 0.4s}.module.has-settings.expanded.svelte-1mu6tbf::after{transform:translateY(-50%) rotate(0);opacity:1}.settings.svelte-1mu6tbf{background-color:rgba(0, 0, 0, 0.36);border-left:solid 4px #4677FF;overflow:hidden}.setting.svelte-1u9hj{display:grid;grid-template-areas:"a b"
            "c c";padding:7px 10px}.name.svelte-1u9hj{grid-area:a;font-weight:500;color:white;font-size:12px}.animation-fix.svelte-1u9hj{height:138px}.value.svelte-1u9hj{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px;cursor:text;text-transform:uppercase;background-color:transparent;border:none;padding:0;margin:0}.color-picker.svelte-1u9hj{grid-area:c}.setting.svelte-10rakz.svelte-10rakz.svelte-10rakz{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-10rakz.svelte-10rakz.svelte-10rakz{font-weight:500;color:white;font-size:12px;margin-left:30px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:relative;display:inline-block;width:22px;height:12px}.switch.svelte-10rakz input.svelte-10rakz.svelte-10rakz{display:none}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz{background-color:#4860a7}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz:before{transform:translateX(10px);background-color:#4677ff}.setting.svelte-fz8b1a{display:grid;grid-template-areas:"a b"
            "c c";grid-template-columns:1fr;padding:7px 10px}.animation-fix.svelte-fz8b1a{min-height:51px}.name.svelte-fz8b1a{grid-area:a;font-weight:500;color:white;font-size:12px}.slider.svelte-fz8b1a{grid-area:c}.value.svelte-fz8b1a{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px}.setting.svelte-nl36k0{padding:7px 10px}.name.svelte-nl36k0{font-weight:500;color:white;font-size:12px}input.svelte-nl36k0{width:100%;background-color:rgba(0, 0, 0, 0.5);border:none;font-family:"Montserrat", sans-serif;padding:5px;border-bottom:solid 2px transparent;border-radius:5px;font-size:12px;margin-top:5px;color:white;transition:ease border-bottom 0.2s;border:solid 2px transparent}input.svelte-nl36k0:focus{border:solid 2px #4677ff}.setting.svelte-7knc6a.svelte-7knc6a{padding:7px 10px;overflow:hidden}.name.svelte-7knc6a.svelte-7knc6a{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-7knc6a.svelte-7knc6a{border-radius:5px 5px 0px 0px}.name.expanded.svelte-7knc6a.svelte-7knc6a::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-7knc6a.svelte-7knc6a::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-7knc6a.svelte-7knc6a{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-7knc6a .value.svelte-7knc6a{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-7knc6a .value.enabled.svelte-7knc6a{color:#4677ff}.settings.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden;margin-top:10px}.setting.svelte-1cmaqns.svelte-1cmaqns{overflow:hidden}.choice.svelte-1cmaqns.svelte-1cmaqns{padding:7px 10px}.name.svelte-1cmaqns.svelte-1cmaqns{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-1cmaqns.svelte-1cmaqns{border-radius:5px 5px 0px 0px}.name.expanded.svelte-1cmaqns.svelte-1cmaqns::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-1cmaqns.svelte-1cmaqns::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-1cmaqns .value.svelte-1cmaqns{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-1cmaqns .value.enabled.svelte-1cmaqns{color:#4677ff}.name.svelte-19v143m{font-weight:500;color:white;font-size:12px;margin-left:10px;margin-bottom:3px}.setting.svelte-19v143m{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;padding:7px 0}.settings.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden}.boolean.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{font-weight:500;color:white;font-size:12px;margin-left:30px}.switch.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:relative;display:inline-block;width:22px;height:12px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-zsk8ei input.svelte-zsk8ei.svelte-zsk8ei{display:none}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei{background-color:#4860a7}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei:before{transform:translateX(10px);background-color:#4677ff}
.clickgui-container.svelte-1fiwon3{background-color:rgba(0, 0, 0, .4);height:100vh;width:100vw;-webkit-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.panel.svelte-tllkak{border-radius:5px;overflow:hidden;width:225px;position:absolute}.title-wrapper.svelte-tllkak{display:grid;grid-template-columns:max-content auto max-content;align-items:center;column-gap:12px;background-color:rgba(0, 0, 0, 0.68);border-bottom:solid 2px #4677ff;padding:10px 15px}.title.svelte-tllkak{font-size:14px;font-weight:600;color:white}.modules.svelte-tllkak{background-color:rgba(0, 0, 0, 0.5);max-height:545px;overflow:auto}.visibility-toggle.svelte-tllkak{height:12px;width:12px;position:relative}.visibility-toggle.svelte-tllkak::before{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:0;left:50%;width:2px;height:100%;margin-left:-1px}.visibility-toggle.svelte-tllkak::after{content:"";position:absolute;background-color:white;transition:transform 0.4s ease-out;top:50%;left:0;width:100%;height:2px;margin-top:-1px}.visibility-toggle.expanded.svelte-tllkak::before{transform:rotate(90deg)}.visibility-toggle.expanded.svelte-tllkak::after{transform:rotate(180deg)}.svelte-tllkak::-webkit-scrollbar{width:0}.module.svelte-1mu6tbf{color:#CBD1E3;text-align:center;font-weight:600;font-size:12px;padding:10px;transition:ease background-color 0.2s, ease color 0.2s;position:relative}.module.enabled.svelte-1mu6tbf{color:white}.module.svelte-1mu6tbf:hover{background-color:rgba(0, 0, 0, 0.36)}.module.has-settings.svelte-1mu6tbf::after{content:"";display:block;position:absolute;height:10px;width:10px;right:15px;top:50%;background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat;opacity:0.5;transform-origin:50% 50%;transform:translateY(-50%) rotate(-90deg);transition:ease opacity 0.2s, ease transform 0.4s}.module.has-settings.expanded.svelte-1mu6tbf::after{transform:translateY(-50%) rotate(0);opacity:1}.settings.svelte-1mu6tbf{background-color:rgba(0, 0, 0, 0.36);border-left:solid 4px #4677FF;overflow:hidden}.setting.svelte-1u9hj{display:grid;grid-template-areas:"a b"
            "c c";padding:7px 10px}.name.svelte-1u9hj{grid-area:a;font-weight:500;color:white;font-size:12px}.animation-fix.svelte-1u9hj{height:138px}.value.svelte-1u9hj{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px;cursor:text;text-transform:uppercase;background-color:transparent;border:none;padding:0;margin:0}.color-picker.svelte-1u9hj{grid-area:c}.setting.svelte-10rakz.svelte-10rakz.svelte-10rakz{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-10rakz.svelte-10rakz.svelte-10rakz{font-weight:500;color:white;font-size:12px;margin-left:30px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-10rakz.svelte-10rakz.svelte-10rakz::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-10rakz.svelte-10rakz.svelte-10rakz{position:relative;display:inline-block;width:22px;height:12px}.switch.svelte-10rakz input.svelte-10rakz.svelte-10rakz{display:none}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz{background-color:#4860a7}.switch.svelte-10rakz input.svelte-10rakz:checked+.slider.svelte-10rakz:before{transform:translateX(10px);background-color:#4677ff}.setting.svelte-fz8b1a{display:grid;grid-template-areas:"a b"
            "c c";grid-template-columns:1fr;padding:7px 10px}.animation-fix.svelte-fz8b1a{min-height:51px}.name.svelte-fz8b1a{grid-area:a;font-weight:500;color:white;font-size:12px}.slider.svelte-fz8b1a{grid-area:c}.value.svelte-fz8b1a{grid-area:b;font-weight:500;color:white;text-align:right;font-size:12px}.setting.svelte-nl36k0{padding:7px 10px}.name.svelte-nl36k0{font-weight:500;color:white;font-size:12px}input.svelte-nl36k0{width:100%;background-color:rgba(0, 0, 0, 0.5);border:none;font-family:"Montserrat", sans-serif;padding:5px;border-bottom:solid 2px transparent;border-radius:5px;font-size:12px;margin-top:5px;color:white;transition:ease border-bottom 0.2s;border:solid 2px transparent}input.svelte-nl36k0:focus{border:solid 2px #4677ff}.setting.svelte-7knc6a.svelte-7knc6a{padding:7px 10px;overflow:hidden}.name.svelte-7knc6a.svelte-7knc6a{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-7knc6a.svelte-7knc6a{border-radius:5px 5px 0px 0px}.name.expanded.svelte-7knc6a.svelte-7knc6a::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-7knc6a.svelte-7knc6a::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-7knc6a.svelte-7knc6a{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-7knc6a .value.svelte-7knc6a{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-7knc6a .value.enabled.svelte-7knc6a{color:#4677ff}.settings.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden;margin-top:10px}.setting.svelte-1cmaqns.svelte-1cmaqns{overflow:hidden}.choice.svelte-1cmaqns.svelte-1cmaqns{padding:7px 10px}.name.svelte-1cmaqns.svelte-1cmaqns{background-color:#4677ff;padding:7px 10px;position:relative;font-weight:500;color:white;font-size:12px;border-radius:5px;transition:ease border-radius 0.2s}.name.expanded.svelte-1cmaqns.svelte-1cmaqns{border-radius:5px 5px 0px 0px}.name.expanded.svelte-1cmaqns.svelte-1cmaqns::after{transform:translateY(-50%) rotate(180deg)}.name.svelte-1cmaqns.svelte-1cmaqns::after{content:"";display:block;position:absolute;height:10px;width:10px;right:10px;top:50%;transition:ease transform 0.2s;transform:translateY(-50%);background-image:url("../img/settings-expand.svg");background-position:center;background-repeat:no-repeat}.values.svelte-1cmaqns.svelte-1cmaqns{background-color:rgba(0, 0, 0, 0.5);border-radius:0px 0px 5px 5px;overflow:hidden}.values.svelte-1cmaqns .value.svelte-1cmaqns{color:rgba(255, 255, 255, 0.5);font-weight:500;font-size:12px;text-align:center;padding:7px;transition:ease color 0.2s}.values.svelte-1cmaqns .value.enabled.svelte-1cmaqns{color:#4677ff}.name.svelte-19v143m{font-weight:500;color:white;font-size:12px;margin-left:10px;margin-bottom:3px}.setting.svelte-19v143m{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;padding:7px 0}.settings.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{background-color:rgba(0, 0, 0, 0.36);border-right:solid 4px #4677FF;overflow:hidden}.boolean.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{padding:7px 10px;display:grid;grid-template-columns:max-content auto;align-items:center;column-gap:10px}.name.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{font-weight:500;color:white;font-size:12px;margin-left:30px}.switch.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:relative;display:inline-block;width:22px;height:12px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei{position:absolute;top:2px;left:0;right:0;bottom:0;background-color:#707070;transition:ease 0.4s;height:8px;border-radius:4px}.slider.svelte-zsk8ei.svelte-zsk8ei.svelte-zsk8ei::before{position:absolute;content:"";height:12px;width:12px;top:-2px;left:0px;background-color:white;transition:ease 0.4s;border-radius:50%}.switch.svelte-zsk8ei input.svelte-zsk8ei.svelte-zsk8ei{display:none}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei{background-color:#4860a7}.switch.svelte-zsk8ei input.svelte-zsk8ei:checked+.slider.svelte-zsk8ei:before{transform:translateX(10px);background-color:#4677ff}

{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/easing/index.mjs","../../node_modules/svelte/transition/index.mjs","../../src/clickgui/settings/BooleanSetting.svelte","../../src/clickgui/settings/RangeSetting.svelte","../../src/clickgui/settings/TextSetting.svelte","../../src/clickgui/settings/TogglableSetting.svelte","../../src/clickgui/settings/ChooseSetting.svelte","../../src/clickgui/settings/ChoiceSetting.svelte","../../src/clickgui/settings/ConfigurableSetting.svelte","../../src/clickgui/settings/GenericSetting.svelte","../../src/clickgui/Module.svelte","../../src/clickgui/Panel.svelte","../../src/ClickGui.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n       